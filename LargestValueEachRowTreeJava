/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> arr = new ArrayList<>();
    public List<Integer> largestValues(TreeNode root) {
    
        if(root == null) return arr;
        
        Queue<TreeNode> q = new LinkedList<>();
        
        levelOrder(root, q);
        return arr;
        
    }
    public void levelOrder(TreeNode root, Queue<TreeNode> q){
    
        q.add(root);
        while(!q.isEmpty()){
        
            int size = q.size();
            int max = Integer.MIN_VALUE;
            
            for(int i =0;i<size;i++){
            
                if(q.peek().left != null){
                    q.add(q.peek().left);
                }
                
                if(q.peek().right != null){
                    q.add(q.peek().right);
                }
                
                max = Math.max(max, q.remove().val);
            }
            arr.add(max);
        }
        
    }
}
