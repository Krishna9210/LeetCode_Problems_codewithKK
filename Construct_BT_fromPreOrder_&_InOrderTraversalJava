/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
    
        // Initialize HashMap for storing inOrder element along with index
        
        Map<Integer,Integer> hm = new HashMap<>();
        
        for(int i=0;i<inorder.length;i++){
            hm.put(inorder[i],i);
        }
        
        // call the another function
        TreeNode root = buildTree(preorder,0,preorder.length-1,inorder,0,inorder.length-1,hm);
        
        return root;
    }
    public TreeNode buildTree(int[] preorder,int preStart,int preEnd, 
                              int[] inorder,int inStart,int inEnd,
                              Map<Integer,Integer> hm){
        
        // base condition
        if(preStart>preEnd || inStart>inEnd) return null;
        
        // make a new node
        TreeNode root = new TreeNode(preorder[preStart]);
        
        // find index of root from hashmap
        int inRoot = hm.get(root.val);
        
        // no of elements left to the root in the inOrder array.
        int numsLeft = inRoot-inStart;
        
        // call for left part
        root.left = buildTree(preorder,preStart+1,preStart+numsLeft,inorder,inStart,inRoot-1,hm);
        
        // call for right part
        root.right = buildTree(preorder,preStart+1+numsLeft,preEnd,inorder,inRoot+1,inEnd,hm);
        
        // return 
        return root;
    }
}
